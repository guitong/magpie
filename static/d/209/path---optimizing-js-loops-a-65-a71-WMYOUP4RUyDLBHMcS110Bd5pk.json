{"data":{"site":{"siteMetadata":{"title":"Magpie","author":"Dan Geng"}},"markdownRemark":{"id":"dce82af7-4264-51c3-bf3e-a456f71295a1","excerpt":"  原文见：  JavaScript: Optimizing loops…","html":"<blockquote>\n<p>  原文见： <a href=\"https://jaysoo.ca/2009/12/23/javascript-optimizing-loops/\">JavaScript: Optimizing loops</a></p>\n</blockquote>\n<p>当你需要遍历一个非常庞大的数组时，你会发现这很有用：使用 <code class=\"language-text\">while</code> 循环而不是 <code class=\"language-text\">for</code> 循环。</p>\n<p>例如，现在有如下的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>myArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你可以使用<code class=\"language-text\">while</code>循环让它运行的更快：</p>\n<!-- more -->\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myArray<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它的原理在于<code class=\"language-text\">n--</code>将会先返回<code class=\"language-text\">n</code>的值再去递减它。所以当它接近索引零时，它会计算<code class=\"language-text\">1</code>为<code class=\"language-text\">true</code>，然后在<code class=\"language-text\">myArray[n]=n;</code>这行之前递减<code class=\"language-text\">n</code>。</p>\n<p>然而，你会发现这种循环是逆向的，所以如果你对循环的顺序有要求的话就不能用这种方法。不过你仍然可以优化第一个例子—通过先将<code class=\"language-text\">myArray.length</code>赋值给一个变量，然后再在for循环的退出条件语句中使用它。这将会使它运行的快一些（取决于你使用的浏览器），因为这样可以避免在每次循环中都进行属性查找。（即<code class=\"language-text\">myArray.length</code>）。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"JavaScript: 优化循环","date":"March 31, 2018"}}},"pageContext":{"slug":"/optimizing-js-loops/","previous":{"fields":{"slug":"/fetch-api-guide/"},"frontmatter":{"title":"Fetch API 简介"}},"next":null}}