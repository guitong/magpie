{"data":{"site":{"siteMetadata":{"title":"Magpie","author":"Bulldog_dan"}},"markdownRemark":{"id":"e06d4326-992d-5f78-af26-4a10a2862f26","excerpt":"场景一：通过输入型绑定把数据从父组件传到子组件 使用 装饰器。 例如： 再看下父组件（部分省略）： 效果如下： 场景二：通过setter截听输入属性值的变化 使用输入属性的setter…","html":"<p>场景一：通过输入型绑定把数据从父组件传到子组件</p>\n<p>使用<code class=\"language-text\">@Input</code>装饰器。</p>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 一个子组件 hero-child.component.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Hero <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hero'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-hero-child'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n    \t&lt;h3>{{hero.name}} says:&lt;/h3>\n    \t&lt;p>I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroChildCompoent</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> hero<span class=\"token punctuation\">:</span> Hero<span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'master'</span><span class=\"token punctuation\">)</span> masterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定别名</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再看下父组件（部分省略）：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n    \t&lt;h2>{{master}} controls {{heroes.length}} heroes&lt;/h2>\n    \t&lt;app-hero-child *ngFor=\"let hero of heroes\"\n    \t\t[hero]=\"hero\"\n    \t\t[master]=\"master\"\n    \t&lt;/app-hero-child>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>效果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/30484000/37081541-b5fc6aa8-2224-11e8-87bf-2170d6fadbd0.png\" alt=\"parent-to-child\"></p>\n<hr>\n<p>场景二：通过setter截听输入属性值的变化</p>\n<p>使用输入属性的setter，以拦截父组件中值的变化，并作出响应。</p>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 一个子组件，输入属性`name`的setter会trim掉名字中的空格，并把空格替换为默认字符串</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-name-child'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;h3>\"{{name}}\"&lt;/h3>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameChildComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    \n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'&lt;no name set>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>场景三：通过<code class=\"language-text\">ngOnChanges()</code>来截听输入属性值的变化</p>\n<p>当需要监听多个、交互式输入属性的时候，此方法比setter更合适。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-version-child'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n        &lt;h3>Version {{major}}.{{minor}}&lt;/h3>\n    \t&lt;h4>Change log:&lt;/h4>\n\t    &lt;ul>\n\t\t\t&lt;li *ngFor=\"let change of changeLog\">{{change}}&lt;/li>\n\t    &lt;/ul>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VersionChildComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnChanges</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> major<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> minor<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    changeLog<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">ngOnChanges</span><span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> SimpleChange<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> log<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> propName <span class=\"token keyword\">in</span> changes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> changedProp <span class=\"token operator\">=</span> changes<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> to <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stirngify</span><span class=\"token punctuation\">(</span>changedProp<span class=\"token punctuation\">.</span>currentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changedProp<span class=\"token punctuation\">.</span><span class=\"token function\">isFirstChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Initial value of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> set to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>to<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>changedProp<span class=\"token punctuation\">.</span>previousValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">ush</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> change <span class=\"token keyword\">from</span> $<span class=\"token punctuation\">{</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">}</span> to $<span class=\"token punctuation\">{</span>to<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeLog<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>场景四：父组件监听子组件的事件</p>\n<p>也就是子 -> 父传递数据。</p>\n<p>需要子组件暴露一个<code class=\"language-text\">EventEmitter</code>属性，当事件发生时，子组件利用该属性<code class=\"language-text\">emits</code>（向上弹射）事件。父组件绑定这个事件属性，并在事件发生时作出响应。</p>\n<p>NEW: 使用<code class=\"language-text\">@Output</code>装饰器。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-voter'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n    \t&lt;h4>{{name}}&lt;/h4>\n    \t&lt;button (click)=\"vote(true)\" [disabled]=\"voted\">Agress&lt;/button>\n\t\t&lt;button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree&lt;/button>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VoterComponent</span> <span class=\"token punctuation\">{</span>\n\t@<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\t@<span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> onVoted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tvoted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">vote</span><span class=\"token punctuation\">(</span>agreed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onVoted<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>agreed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>voted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>父组件绑定一个事件处理器：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n    \t&lt;app-voter\n    \t\t[name]=\"voter\"\n    \t\t(onVoted)=\"onVoted($event)\"\n    \t>&lt;/app-voter>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VotedTakerComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">onVoted</span><span class=\"token punctuation\">(</span>agreed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        agreed <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>agreed<span class=\"token operator\">++</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disagreed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>场景五： 父子组件通过本地变量互动</p>\n<p>父组件可以在模版里新建一个本地变量代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// parent</span>\n<span class=\"token operator\">...</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n    \t&lt;h3>Countdown to Liftoff (via local variable)&lt;/h3>\n    \t&lt;button (click)=\"timer.start()\">Start&lt;/button>\n    \t&lt;button (click)=\"timer.stop()\">Stop&lt;/button>\n    \t&lt;div> class=\"seconds\">{{timer.seconds}}&lt;/div>\n    \t&lt;app-countdown-timer #timer>&lt;/app-countdown-timer>\n    `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountdownLocalVarParentComponent</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>本地变量 —> <code class=\"language-text\">#timer</code></p>\n<hr>\n<p>场景六： 父组件调用<code class=\"language-text\">@ViewChild()</code></p>\n<p>本地变量的方法有个局限性：父组件本身的代码对子组件没有访问权。</p>\n<p>当父组件类需要访问子组件数据时，可以把子组件作为<em>ViewChild</em>，注入到父组件里面。</p>\n<p>父组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CountdownTimerComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angualr/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountdownViewChildParentComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AfterViewInit</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span>CountdownTimerComponent<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> timerComponent<span class=\"token punctuation\">:</span> CountdownTimerComponent<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">ngAfterViewInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...</span>\n        <span class=\"token comment\">// but wait a tick first to avoid one-time devMode</span>\n        <span class=\"token comment\">// unidirectional-data-flow-violation error</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">seconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerComponent<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerComponent<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerComponent<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>注意：Angular的单向数据流规则会阻止在同一个周期内更新父组件视图。</em></p>\n<hr>\n<p>场景七： 父子组件通过服务来通讯</p>\n<p>（未完）</p>","frontmatter":{"title":"Angualr 组件之间如何通讯？","date":"April 30, 2018"}}},"pageContext":{"slug":"/angular-components-communicate/","previous":{"fields":{"slug":"/flex-grammar/"},"frontmatter":{"title":"Flex 语法总结"}},"next":{"fields":{"slug":"/what-css-display-properties-do-to-table-semantics/"},"frontmatter":{"title":"小记: 关于CSS display 属性对表格语义的影响"}}}}