{"data":{"site":{"siteMetadata":{"title":"Magpie","author":"Dan Geng"}},"markdownRemark":{"id":"a371c957-cf1f-5620-b899-0b1823b75808","excerpt":"MDN Fetch API Fetch API 提供了一个用于获取资源的接口（包括跨网络）。如果您使用过 的话将会对此比较熟悉，但是新的API提供了更强大和灵活的功能集。 1. 概念与用法 Fetch…","html":"<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">MDN Fetch API</a></p>\n</blockquote>\n<p>Fetch API 提供了一个用于获取资源的接口（包括跨网络）。如果您使用过<code class=\"language-text\">XMLHttpRequest</code>的话将会对此比较熟悉，但是新的API提供了更强大和灵活的功能集。</p>\n<h2>1. 概念与用法</h2>\n<p>Fetch提供了关于请求和响应对象（以及与网络请求相关的其他事项）的通用定义。这将允许它们在未来任何需要的地方被使用，无论是service workers, Cache API和处理或修改请求和响应的其他类似的东西，还是任何可能要求您以编程方式生成你的响应的用例。</p>\n<!-- more -->\n<p>它还提供了对相关概念（例如：CORS and the HTTP origin header semantics）的定义，以取代它们在其他地方的独立定义。</p>\n<p>若要创建请求并获取资源，使用<code class=\"language-text\">GlobalFetch.fetch</code>方法。它在多个接口中实现，特别是<code class=\"language-text\">Window</code>和<code class=\"language-text\">WorkerGlobalScope</code>。这使得它可以在几乎任何可能要获取资源的上下文中使用。</p>\n<p><code class=\"language-text\">Fetch()</code>方法有一个必需参数，就是你想获取的资源的路径。它返回一个Promise对象以解析该请求的响应，无论它是成功还是失败。您也可以传入一个<code class=\"language-text\">init</code>选项对象作为可选的第二参数（see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request\"><code class=\"language-text\">Request</code></a>）。</p>\n<p>一旦检索到响应，就可以使用多种方法定义 body 内容和如何去处理它。（see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Body\"><code class=\"language-text\">Body</code></a>）。</p>\n<p>你可以使用<code class=\"language-text\">Request()</code>和<code class=\"language-text\">Response()</code>构造函数直接创建一个请求和响应，但是你不太可能直接这样做。相反，这些更可能被创建为其他API操作的结果（for example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith\"><code class=\"language-text\">FetchEvent.respondWith</code></a> from service workers）。</p>\n<p><em>Note: 查看更多Fetch API的用法见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Using Fetch</a>，概念学习请查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Basic_concepts\">Fetch basic concepts</a>。</em></p>\n<h2>2. Fetch 接口</h2>\n<h3>2.1 <code class=\"language-text\">GlobalFetch</code></h3>\n<p>包含<code class=\"language-text\">fetch()</code>方法，用于获取资源。</p>\n<h3>2.2 <code class=\"language-text\">Headers</code></h3>\n<p>表示响应/请求头，允许您查询它们并根据结果执行不同操作。</p>\n<h3>2.3 <code class=\"language-text\">Request</code></h3>\n<p>表示资源请求。</p>\n<h3>2.4 <code class=\"language-text\">Response</code></h3>\n<p>表示一个请求的响应。</p>\n<h3>2.5 实验性的 fetch controller/signal/observer interface</h3>\n<p>也被叫做“可取消fetch（cancellabel fetch）”，  下面的接口包含允许在生命周期中观察和控制fetch请求操作。</p>\n<h4>2.5.1 <code class=\"language-text\">FetchController</code></h4>\n<p>表示一个控制器对象，该对象允许你控制一个或多个fetch请求。</p>\n<h4>2.5.2 <code class=\"language-text\">FetchSignal</code></h4>\n<p>表示一个信号对象， 该对象允许你与一个fetch请求通信并通过<code class=\"language-text\">FetchController</code>控制它。</p>\n<h4>2.5.3 <code class=\"language-text\">FetchObserver</code></h4>\n<p>表示一个观察者对象，该对象允许你检索有关fetch请求状态的信息。</p>\n<h4>2.5.4 <code class=\"language-text\">ObserverCallback</code></h4>\n<p>Provides a callback function that runs when the fetch request it is assocated with runs. 它提供了一个<code class=\"language-text\">FetchObserver</code>对象，可以用于检索有关fetch请求状态的信息。</p>\n<h2>3. Fetch mixin</h2>\n<h3>3.1 <code class=\"language-text\">Body</code></h3>\n<p>提供与响应/请求体有关的方法，允许你声明其内容类型及处理方法。</p>\n<h2>4. 规范</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">规范</th>\n<th align=\"left\">状态</th>\n<th align=\"left\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"https://fetch.spec.whatwg.org/\">Fetch</a></td>\n<td align=\"left\">Living Standard</td>\n<td align=\"left\">Initial definition</td>\n</tr>\n</tbody>\n</table>\n<h2>5. 浏览器兼容性</h2>\n<img width=\"1175\" alt=\"fetch-api\" src=\"https://user-images.githubusercontent.com/30484000/36837080-4a0047fa-1d76-11e8-943c-1f83127ad12d.png\">\n<p>[1] This API is implemented behind a preference.</p>\n<p>[2] Prior to Firefox 52, <code class=\"language-text\">get()</code> only returned the first value in the specified header, with <code class=\"language-text\">getAll()</code> returning all values. From 52 onwards, <code class=\"language-text\">get()</code> now returns all values and <code class=\"language-text\">getAll()</code> has been removed.</p>\n<p>[3] Hidden behind a preference in 55+ Nightly. In about:config, you need to create two new boolean prefs — <code class=\"language-text\">dom.fetchObserver.enabled</code> and <code class=\"language-text\">dom.fetchController.enabled</code> — and set the values of both to <code class=\"language-text\">true</code>.</p>\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Using Fetch</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API\">ServiceWorker API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">HTTP access control (CORS)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP</a></li>\n<li><a href=\"https://github.com/github/fetch\">Fetch polyfill</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Basic_concepts\">Fetch basic concepts</a></li>\n</ul>\n<p>（完）</p>","frontmatter":{"title":"Fetch API 简介","date":"March 25, 2018"}}},"pageContext":{"slug":"/fetch-api-guide/","previous":{"fields":{"slug":"/centering-in-css/"},"frontmatter":{"title":"朝花夕拾 • CSS居中完全指南"}},"next":{"fields":{"slug":"/optimizing-js-loops/"},"frontmatter":{"title":"JavaScript: 优化循环"}}}}