{"data":{"site":{"siteMetadata":{"title":"Magpie","author":"Bulldog_dan"}},"markdownRemark":{"id":"18d16699-0122-51ce-aaaa-4475726914dc","excerpt":"Using npm update and npm outdated to update dependencies  By  PANU PITKÄMÄKI 更新一个库的新版本并不容易。Semantic versioning screws things just enough, 所以手动修改 文件的方式要比尝试npm…","html":"<blockquote>\n<p><a href=\"https://bytearcher.com/articles/using-npm-update-and-npm-outdated-to-update-dependencies/\">Using npm update and npm outdated to update dependencies</a></p>\n<p> By <a href=\"https://bytearcher.com/contact/\">PANU PITKÄMÄKI</a></p>\n</blockquote>\n<p>更新一个库的新版本并不容易。Semantic versioning screws things just enough, 所以手动修改<code class=\"language-text\">package.json</code>文件的方式要比尝试npm杂技更安全一些。这篇文章将介绍如何只使用npm从命令行更新依赖。</p>\n<h2>使用 npm update 更新至最接近版本</h2>\n<p>当你在一个新项目上运行<code class=\"language-text\">npm install</code> ，npm将安装满足<code class=\"language-text\">package.json</code>文件中语义版本控制定义的范围的最新版本。初始化安装后，再次运行<code class=\"language-text\">npm install</code>将不会更新已存在的包，这是因为npm已经在文件系统中找到了满足要求的版本。</p>\n<p>你可以使用<code class=\"language-text\">npm update</code>来更新已安装的包，而不是<code class=\"language-text\">npm install</code>。当你运行<code class=\"language-text\">npm update</code>时，npm将检查是否有满足语义版本控制要求的更新版本（newer versions）并安装它们。</p>\n<p>假设我们依赖lodash的版本为<code class=\"language-text\">^3.9.3</code>，且该版本安装在<code class=\"language-text\">node_modules/lodash</code>目录下。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lodash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.9.2\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后运行<code class=\"language-text\">npm update</code>将会安装版本<code class=\"language-text\">3.10.1</code>至相同目录下，但是<code class=\"language-text\">package.json</code>并未修改（你可以通过传入 —save 选项来改变）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm update\n└── lodash@3.10.1</code></pre></div>\n<h2>使用@latest标记进行更大的更新</h2>\n<p>要更新超出语义版本控制范围的版本需要两个部分。</p>\n<p>第一，使用<code class=\"language-text\">npm outdated</code>要求npm列出有更新版本的包。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm outdated\nPackage  Current  Wanted  Latest  Location\nlodash    3.10.1  3.10.1  4.16.4  backend</code></pre></div>\n<p>第二，让npm安装最新版本的包。你可以使用<code class=\"language-text\">@latest</code>标记索取最新版本。你也应该使用<code class=\"language-text\">--save</code>标记更新<code class=\"language-text\">package.json</code>文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install lodash@latest --save</code></pre></div>\n<p>现在npm将安装<code class=\"language-text\">4.16.4</code>版本至<code class=\"language-text\">node_modules/</code>目录下。同时，<code class=\"language-text\">package.json</code>也被更新。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"lodash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.16.4\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>（完）</p>","frontmatter":{"title":"使用npm update 和 npm outdated 更新依赖","date":"June 26, 2018"}}},"pageContext":{"slug":"/ use-npm-update-and-npm-outdated-to-update-dependencies/","previous":{"fields":{"slug":"/sharing-data-between-angular-components/"},"frontmatter":{"title":"Angular组件共享数据的四种方法"}},"next":{"fields":{"slug":"/lisp-develop-guide/"},"frontmatter":{"title":"[Getting Started] - Lisp环境配置指南"}}}}